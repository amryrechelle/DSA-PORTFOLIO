import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter data for 1st node: ");
        int data1 = scanner.nextInt();
        System.out.print("Enter data for 2nd node: ");
        int data2 = scanner.nextInt();
        System.out.print("Enter data for 3rd node: ");
        int data3 = scanner.nextInt();

        CreateList cl = new CreateList();
        cl.add(data1);
        cl.add(data2);
        cl.add(data3);

        cl.display();

        scanner.close();
    }
}

class CreateList {
    // Represents the node of the list.
    public class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
        }
    }

    // Declaring head and tail pointer as null.
    public Node head = null;
    public Node tail = null;

    // This function will add the new node at the end of the list.
    public void add(int data) {
        // Create new node
        Node newNode = new Node(data);
        // Checks if the list is empty.
        if (head == null) {
            // If the list is empty, both head and tail would point to the new node.
            head = newNode;
            tail = newNode;
            newNode.next = head;
        } else {
            // tail will point to the new node.
            tail.next = newNode;
            // New node will become the new tail.
            tail = newNode;
            // Since it is a circular linked list, tail will point to head.
            tail.next = head;
        }
    }

    // Displays all the nodes in the list
    public void display() {
        Node current = head;
        if (head == null) {
            System.out.println("List is empty");
        } else {
            System.out.println("Nodes of the circular linked list: ");
            do {
                // Prints each node by incrementing the pointer.
                System.out.print(" " + current.data);
                current = current.next;
            } while (current != head);
            System.out.println();
        }
    }
}