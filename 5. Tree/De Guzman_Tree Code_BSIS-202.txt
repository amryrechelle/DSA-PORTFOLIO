//DE GUZMAN, MARY RECHELLE
//BSIS-202





class Node { 
int item;
Node left, right;
public Node(int key) { 
item = key;
left = right = null;
}
}
class Main {
// root of Tree 
Node root;
Main() { 
root = null;
}
// method to count leaf nodes
public static int countLeaf(Node node) { 
if(node == null) {
return 0;
}
// if left and right of the node is null
// it is leaf node
if (node.left == null && node.right == null) { 
return 1;
}
else {
return countLeaf(node.left) + countLeaf(node.right);
}
}
public static void main(String[] args) {
// create an object of Tree 
Main tree = new Main();
// create nodes of tree 
tree.root = new Node('P'); 
tree.root.left = new Node('G'); 
tree.root.right = new Node('W');
// create child nodes of left child G
tree.root.left.left = new Node('c'); 
tree.root.left.right = new Node('k');
// create child nodes of right child W
tree.root.right.left = new Node('s'); 
tree.root.right.right = new Node('y');
// create child nodes of left left child c
tree.root.left.left.left = new Node('a'); 
tree.root.left.left.right = new Node('e');
// create child nodes of left right child k 
tree.root.left.right.left = new Node('i'); 
tree.root.left.right.right = new Node('m');
// create child nodes of right left child s 
tree.root.right.left.left = new Node('q'); 
tree.root.right.left.right = new Node('u');
// create child nodes of right right child y
tree.root.right.right.left = new Node('x'); 
tree.root.right.right.right = new Node('z');

// call method to count leaf nodes 
int leafNodes = countLeaf(tree.root);

System.out.println("Total Leaf Nodes = " + leafNodes);
}
}


